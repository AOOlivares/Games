{"version":3,"sources":["serviceWorker.js","utils/Constants.js","utils/gameUtils.js","features/validationSlice.js","features/rowsSlice.js","features/columnsSlice.js","features/gameSlice.js","features/userSlice.js","app/store.js","components/Board.js","components/HeadersInformation.js","components/NewGame.js","components/Completed.js","components/Menu.js","components/Navigator.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","CLICKTYPES","HIT_COLORS","HEADER_COLORS","calculatePossibilities","length","grouping","minimumSpace","forEach","x","key","arr","i","idx","Object","is","notLastElement","getVariations","empty","index","numberOfVariationGroups","variations","variation","subI","variationFirstCut","search","HIT","variationTemplate","slice","subVariationMinSpace","subVariationSize","subVariation","push","valuesReducer","numberOfGroups","callback","result","array","value","calculateArrayPossibilities","arrayValues","map","getAllHitIndexes","reduce","e","getIndexes","input","binarySolution","hitIndex","crossIndex","hited","hitType","isUserSolutionPotentiallyValid","userInput","possibilities","binaryArrayUserSolution","obj","bitUser","parseInt","join","some","possibility","bitPos","xorStringAgain","toString","userHits","every","userCross","parseInput","Array","from","c","color","auto","initialState","rows","columns","completed","validationSlice","createSlice","name","reducers","resetValidation","state","setRowsValidation","action","payload","setColumnsValidation","setPuzzleCompleted","actions","selectCompleted","validation","selectRowsValidation","selectColumnValidation","validatePuzzle","dispatch","getState","game","puzzle","areTheSame","row","verticalChunks","column","horizontalChunks","vChunks","v","solution","answer","subArray","subIndex","r","rowsSlice","values","setRowsValues","setRowsPossibilities","selectRowsValues","selectRowsAnswer","setRows","matrix","rowValues","j","rowValuesReducer","rowPossibilities","parsedRow","setAutoCompleteRow","columnsSlice","setColumnsValues","setColumnsPossibilities","selectColumnValues","selectColumnsAnswer","setColumns","columnValues","columnValuesReducer","columnPossibilities","parsedColumn","setAutoCompleteColumn","gameSlice","setNewPuzzle","initGame","subMatrix","setGameHit","type","iX","iY","selectGame","selectNumberOfRows","selectNumberOfColumns","initiateGame","newGameLengths","difficulty","y","isOdd","num","getRandomInt","min","max","Math","ceil","floor","random","userSlice","clickType","setClickType","selectUserClickType","user","configureStore","reducer","userReducer","gameReducer","rowsReducer","columnsReducer","validationReducer","styles","board","gridColumn","gridRow","boxSizing","boardGrid","display","gridGap","height","cell","alignItems","justifyContent","fontFamily","fontSize","fontWeight","hitColors","hit","Cell","useSelector","useDispatch","handleClick","preventDefault","innerClickType","onContextMenu","onClick","style","backgroundColor","BoardGrid","userSolution","numberOfRows","numberOfColumns","gridTemplateColumns","gridTemplateRows","Board","headers","header","panel","rowHeaders","columnHeaders","Panel","Header","headerValues","valid","alignment","undefined","Headers","headersValues","gridTemplate","validations","RowHeaders","rowHeaderValues","rowsValidation","gridAutoFlow","ColumnHeaders","columnHeaderValues","columnsValidation","HeadersInformation","userAnswerRows","userAnswerColumns","userAnswer","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","NewGame","currentTarget","id","number","isOpen","contentLabel","validationStyle","buttonWrapper","Completed","wrapper","menu","item","lineHeight","Menu","useState","selected","setSelected","Navigator","child","wrapperStyle","gridTtemplateRows","width","Game","App","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae427fce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const HIT = '1';\nexport const EMPTY = '0';\nexport const END_OF_HIT = HIT + EMPTY;\nexport const CLICKTYPES = {\n    Hit: 'hit',\n    Cross: 'X',\n    Unknown: '?',\n    Clear: 'clear'\n}\nexport const HIT_COLORS = {\n    hit: '#75daad',\n    empty: '#ffc299'\n}\n\nexport const HEADER_COLORS = {\n    valid: \"#79d279\",\n    invalid: \"#ff6363\"\n}","import { HIT, EMPTY, END_OF_HIT, CLICKTYPES, HIT_COLORS } from './Constants'\nconst getVariations = (length, minimumSpace) => {\n    if (!minimumSpace) {\n        let empty = '';\n        for (let index = 0; index < length; index++) {\n            empty += EMPTY\n        }\n        return [empty];\n    }\n\n    const numberOfVariationGroups = (length - minimumSpace.length) + 1;\n    const variations = [];\n    for (let index = 0; index < numberOfVariationGroups; index++) {\n        let variation = minimumSpace;\n        for (let subI = 0; subI < index; subI++) {\n            variation = EMPTY + variation;\n        }\n        const endOfFirstElementInVariation = variation.search(END_OF_HIT);\n        const variationFirstCut = endOfFirstElementInVariation + 1;\n        const variationTemplate = variation.slice(0, variationFirstCut);\n        let subVariationMinSpace = variation.slice(variationFirstCut);\n\n        if (variation.search(END_OF_HIT) >= 0) {\n            const subVariationSize = length - variationTemplate.length;\n            const subSubVariations = getVariations(subVariationSize, subVariationMinSpace);\n            subSubVariations.forEach(subVariation => {\n                variations.push(variationTemplate + subVariation);\n            });\n        } else {\n            while (length > subVariationMinSpace.length) {\n                subVariationMinSpace += 0;\n            }\n            variations.push(variationTemplate + subVariationMinSpace);\n        }\n    }\n    return variations;\n}\nconst calculatePossibilities = (length, grouping) => {\n    const notLastElement = (arr, idx) => !Object.is(arr.length - 1, idx);\n\n    let minimumSpace = '';\n    grouping.forEach((x, key, arr) => {\n        for (let i = 0; i < x; i++) {\n            minimumSpace += 1;\n        }\n        if (notLastElement(arr, key)) {\n            minimumSpace += 0;\n        }\n    });\n\n    return getVariations(length, minimumSpace);\n}\n\nconst valuesReducer = (numberOfGroups, callback) => {\n    const result = [];\n    for (let i = 0; i < numberOfGroups; i++) {\n        const array = [];\n\n        const value = callback(0, array, i);\n\n        if (value) {\n            array.push(value);\n        }\n\n        result.push(array);\n    }\n\n    return result;\n}\nexport const rowValuesReducer = (matrix) => valuesReducer(matrix.length, (value, row, index) => {\n    for (let j = 0; j < matrix[0].length; j++) {\n        if (matrix[index][j] === HIT) {\n            value++;\n            if (matrix[index][j + 1] !== HIT) {\n                row.push(value);\n                value = 0;\n            }\n        }\n    }\n    return value;\n});\n\nexport const columnValuesReducer = (matrix) => valuesReducer(matrix[0].length, (value, column, index) => {\n    for (let j = 0; j < matrix.length; j++) {\n        if (matrix[j][index] === HIT) {\n            value++;\n            if (matrix[j + 1] && (matrix[j + 1][index] !== HIT)) {\n                column.push(value);\n                value = 0;\n            }\n        }\n    }\n    return value;\n});\nexport const calculateArrayPossibilities = (arrayValues, length) => arrayValues.map(x => calculatePossibilities(length, x));\n\n\nconst getAllHitIndexes = (array) => array.reduce((arr, e, i) => (((e === HIT) && arr.push(i), arr)), []);\nconst getAllCrossIndexes = (array) => array.reduce((arr, e, i) => (((e.hited && e.hitType === CLICKTYPES.Cross) && arr.push(i), arr)), []);\nconst getIndexes = (input, binarySolution) => ({ hitIndex: getAllHitIndexes(binarySolution), crossIndex: getAllCrossIndexes(input) });\nexport const isUserSolutionPotentiallyValid = (userInput, possibilities) => {\n    const binaryArrayUserSolution = userInput.map((obj) => obj.hited ? obj.hitType === CLICKTYPES.Hit ? '1' : '0' : '0');\n    const { hitIndex, crossIndex } = getIndexes(userInput, binaryArrayUserSolution);\n\n    const bitUser = parseInt(binaryArrayUserSolution.join(''), 2);\n    return possibilities.some(possibility => {\n        const bitPos = parseInt(possibility, 2);\n        const or = bitPos | bitUser;\n        const xor = or ^ bitPos;\n        let xorStringAgain = xor.toString(2);\n        while (possibility.length > xorStringAgain.length) {\n            xorStringAgain = EMPTY + xorStringAgain;\n        }\n\n        const userHits = hitIndex.every(x => xorStringAgain[x] === EMPTY);\n        const userCross = crossIndex.every(x => possibility[x] === EMPTY);\n        return userHits === true && userCross === true;\n    });\n}\n\nexport const isUserSolutionCompleted = (userInput, possibilities) => {\n    const binaryArrayUserSolution = userInput.map((obj) => obj.hited ? obj.hitType === CLICKTYPES.Hit ? '1' : '0' : '0');\n    const { hitIndex } = getIndexes(userInput, binaryArrayUserSolution);\n    if (hitIndex.length === 0) return undefined;\n    return possibilities.find((possibility, index) => {\n        const pHitIndex = getAllHitIndexes(Array.from(possibility));\n        return pHitIndex.every(e => hitIndex.includes(e)) && hitIndex.every(e => pHitIndex.includes(e));\n    })\n}\n\nexport const parseInput = (possibility) => {\n    return Array.from(possibility).map(c => {\n        if (c === HIT) return { hitType: CLICKTYPES.Hit, hited: true, value: '', color: HIT_COLORS.hit }\n        else return { hitType: CLICKTYPES.Cross, hited: true, value: CLICKTYPES.Cross, color: HIT_COLORS.empty, auto: true }\n    });\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { isUserSolutionPotentiallyValid } from '../utils/gameUtils';\nimport { EMPTY, HIT, CLICKTYPES } from '../utils/Constants';\n\nconst initialState = {\n    rows: {},\n    columns: {},\n    completed: false\n}\n\nexport const validationSlice = createSlice({\n    name: 'validation',\n    initialState: initialState,\n    reducers: {\n        resetValidation: state => initialState,\n        setRowsValidation: (state, action) => {\n            const { index, value } = action.payload;\n            state.rows[index] = value;\n        },\n        setColumnsValidation: (state, action) => {\n            const { index, value } = action.payload;\n            state.columns[index] = value;\n        },\n        setPuzzleCompleted: (state, action) => {\n            state.completed = action.payload\n        }\n    },\n});\n\nexport const { setRowsValidation, setColumnsValidation, setPuzzleCompleted, resetValidation } = validationSlice.actions;\n\nexport const selectCompleted = state => state.validation.completed;\nexport const selectRowsValidation = state => state.validation.rows;\nexport const selectColumnValidation = state => state.validation.columns;\n\nexport default validationSlice.reducer;\n\nexport const validateRows = () => (dispatch, getState) => {\n    const { possibilities } = getState().rows;\n    const { game } = getState().game;\n    game.forEach((row, index) => {\n        const value = isUserSolutionPotentiallyValid(row, possibilities[index]);\n        dispatch(setRowsValidation({ index, value }));\n    });\n}\n\nexport const validateColumns = () => (dispatch, getState) => {\n    const { possibilities } = getState().columns;\n    const { game } = getState().game;\n    const verticalGame = verticalChunks(game, game[0].length)\n    verticalGame.forEach((column, index) => {\n        const value = isUserSolutionPotentiallyValid(column, possibilities[index]);\n        dispatch(setColumnsValidation({ index, value }));\n    });\n}\n\nexport const validatePuzzle = () => (dispatch, getState) => {\n    const { puzzle, game } = getState().game;\n\n    dispatch(setPuzzleCompleted(areTheSame(puzzle, game)));\n    dispatch(validateRows());\n    dispatch(validateColumns());\n}\n\nconst verticalChunks = (horizontalChunks, columns) => {\n    const vChunks = [];\n    for (let index = 0; index < columns; index++) {\n        vChunks.push(horizontalChunks.map((v, i, array) => array[i][index]))\n    }\n    return vChunks;\n}\n\nconst areTheSame = (solution, answer) => {\n    const result2 = solution.map((subArray, index) => subArray.map((value, subIndex) => {\n        let userInput = EMPTY\n        if (answer[index][subIndex].hited) {\n            if (answer[index][subIndex].hitType === CLICKTYPES.Hit) {\n                userInput = HIT\n            }\n        }\n\n        return value === userInput;\n    }));\n    return result2.every(subArray => subArray.every(r => r === true));\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { rowValuesReducer, calculateArrayPossibilities, parseInput } from '../utils/gameUtils';\nimport { setAutoCompleteRow } from './gameSlice';\n\nexport const rowsSlice = createSlice({\n    name: 'rows',\n    initialState: {\n        values: [[]],\n        possibilities: [[]],\n    },\n    reducers: {\n        setRowsValues: (state, action) => {\n            state.values = action.payload;\n        },\n        setRowsPossibilities: (state, action) => {\n            state.possibilities = action.payload;\n        }\n    },\n});\n\nexport const { setRowsValues, setRowsPossibilities } = rowsSlice.actions;\n\nexport const selectRowsValues = state => state.rows.values;\nexport const selectRowsAnswer = state => state.rows.answer;\nexport const selectRowsPossibilities = state => state.rows.possibilities;\n\nexport default rowsSlice.reducer;\n\nexport const setRows = (matrix) => dispatch => {\n    const rowValues = rowValuesReducer(matrix);\n    dispatch(setRowsValues(rowValues));\n    const rowPossibilities = calculateArrayPossibilities(rowValues, matrix[0].length);\n    dispatch(setRowsPossibilities(rowPossibilities));\n    rowPossibilities.forEach((possibilities, index) => {\n        if (possibilities.length === 1) {\n            const parsedRow = parseInput(possibilities[0]);\n            dispatch(setAutoCompleteRow({ row: parsedRow, index }))\n        }\n    });\n}\n\n","import { createSlice } from '@reduxjs/toolkit';\nimport { columnValuesReducer, calculateArrayPossibilities, parseInput } from '../utils/gameUtils';\nimport { setAutoCompleteColumn } from './gameSlice';\n\nexport const columnsSlice = createSlice({\n    name: 'columns',\n    initialState: {\n        values: [[]],\n        possibilities: [[]]\n    },\n    reducers: {\n        setColumnsValues: (state, action) => {\n            state.values = action.payload;\n        },\n        setColumnsPossibilities: (state, action) => {\n            state.possibilities = action.payload;\n        },\n    },\n});\n\nexport const { setColumnsValues, setColumnsPossibilities } = columnsSlice.actions;\n\nexport const selectColumnValues = state => state.columns.values;\nexport const selectColumnsAnswer = state => state.columns.answer;\nexport const selectColumnPossibilities = state => state.columns.possibilities;\n\nexport default columnsSlice.reducer;\n\nexport const setColumns = (matrix) => dispatch => {\n    const columnValues = columnValuesReducer(matrix);\n    dispatch(setColumnsValues(columnValues));\n    const columnPossibilities = calculateArrayPossibilities(columnValues, matrix.length);\n    dispatch(setColumnsPossibilities(columnPossibilities));\n    columnPossibilities.forEach((possibilities, index) => {\n        if (possibilities.length === 1) {\n            const parsedColumn = parseInput(possibilities[0]);\n            dispatch(setAutoCompleteColumn({ column: parsedColumn, index }));\n        }\n    });\n}\n\n","import { createSlice } from '@reduxjs/toolkit';\nimport { HIT, EMPTY, HIT_COLORS, CLICKTYPES } from '../utils/Constants';\nimport { resetValidation, validatePuzzle } from './validationSlice';\nimport { setRows } from './rowsSlice';\nimport { setColumns } from './columnsSlice';\n\nexport const gameSlice = createSlice({\n    name: 'game',\n    initialState: {\n        puzzle: [\n            [EMPTY, EMPTY, HIT],\n            [HIT, EMPTY, EMPTY],\n            [HIT, HIT, EMPTY],\n        ],\n        game: [[]]\n    },\n    reducers: {\n        setNewPuzzle: (state, action) => {\n            state.puzzle = action.payload\n        },\n        initGame: (state, action) => {\n            state.game = action.payload.map((subMatrix) => subMatrix.map(() => ({ hited: false, color: HIT_COLORS.empty, value: '' })))\n        },\n        setGameHit: (state, action) => {\n            const { type, iX, iY } = action.payload;\n            switch (type) {\n                case CLICKTYPES.Hit:\n                    state.game[iX][iY] = { hitType: type, hited: true, value: '', color: HIT_COLORS.hit };\n                    break;\n                case CLICKTYPES.Cross:\n                    state.game[iX][iY] = { hitType: type, hited: true, value: CLICKTYPES.Cross, color: HIT_COLORS.empty }\n                    break;\n                case CLICKTYPES.Unknown:\n                    state.game[iX][iY] = { hitType: type, hited: true, value: CLICKTYPES.Unknown, color: HIT_COLORS.hit }\n                    break;\n                case CLICKTYPES.Clear:\n                    state.game[iX][iY] = { hited: false, value: '', color: HIT_COLORS.empty }\n                    break;\n                default:\n                    break;\n            }\n        },\n        setAutoCompleteRow: (state, action) => {\n            const { row, index } = action.payload;\n            state.game[index] = row;\n        },\n        setAutoCompleteColumn: (state, action) => {\n            const { column, index } = action.payload;\n            state.game.forEach((row, iX) => {\n                state.game[iX][index] = column[iX];\n            });\n        }\n    }\n});\n\nexport const { initGame, setGameHit, setAutoCompleteRow, setAutoCompleteColumn, setNewPuzzle } = gameSlice.actions;\n\nexport const selectMatrix = state => state.game.puzzle;\nexport const selectGame = state => state.game.game;\nexport const selectNumberOfRows = state => state.game.puzzle.length\nexport const selectNumberOfColumns = state => state.game.puzzle[0].length\n\nexport default gameSlice.reducer;\n\nexport const initiateGame = () => (dispatch, getState) => {\n    const { puzzle } = getState().game;\n    dispatch(initGame(puzzle))\n    dispatch(resetValidation())\n    dispatch(setRows(puzzle));\n    dispatch(setColumns(puzzle));\n    dispatch(validatePuzzle());\n}\n\nexport const newPuzzle = (difficulty) => dispatch => {\n    const { x, y } = newGameLengths(difficulty);\n    let puzzle = [];\n    for (let i = 0; i < x; i++) {\n        let subArray = [];\n        for (let subI = 0; subI < y; subI++) {\n            const number = getRandomInt(1, 10);\n            if (isOdd(number)) subArray.push(HIT)\n            else subArray.push(EMPTY)\n        }\n        puzzle.push(subArray)\n    }\n    dispatch(setNewPuzzle(puzzle));\n    dispatch(initiateGame());\n}\n\nconst newGameLengths = (difficulty) => {\n    switch (difficulty) {\n        case 'medium':\n            return { x: 10, y: 10 };\n        case 'hard':\n            return { x: 10, y: 15 };\n        default:\n            return { x: 5, y: 5 };\n    }\n}\n\nconst isOdd = (num) => num % 2;\n\nconst getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { CLICKTYPES } from '../utils/Constants';\nimport { setGameHit } from './gameSlice';\nimport { validatePuzzle } from './validationSlice';\n\nexport const userSlice = createSlice({\n    name: 'user',\n    initialState: {\n        clickType: CLICKTYPES.Hit\n    },\n    reducers: {\n        setClickType: (state, action) => {\n            state.clickType = action.payload\n        },\n    },\n});\n\nexport const { setClickType } = userSlice.actions;\n\nexport const selectUserClickType = state => state.user.clickType;\n\nexport default userSlice.reducer;\n\nexport const setUserHit = (payload) => dispatch => {\n    dispatch(setGameHit(payload));\n    dispatch(validatePuzzle());\n}","import { configureStore } from '@reduxjs/toolkit';\nimport gameReducer from '../features/gameSlice';\nimport userReducer from '../features/userSlice';\nimport validationReducer from '../features/validationSlice';\nimport rowsReducer from '../features/rowsSlice';\nimport columnsReducer from '../features/columnsSlice';\n\nexport default configureStore({\n    reducer: {\n        user: userReducer,\n        game: gameReducer,\n        rows: rowsReducer,\n        columns: columnsReducer,\n        validation: validationReducer,\n    },\n});\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CLICKTYPES } from '../utils/Constants';\nimport { setUserHit, selectUserClickType } from '../features/userSlice';\nimport { selectGame, selectNumberOfRows, selectNumberOfColumns } from '../features/gameSlice';\n\nconst styles = {\n    board: {\n        gridColumn: \"2 / 8\",\n        gridRow: \"2 / 8\",\n        boxSizing: \"border-box\",\n    },\n    boardGrid: {\n        display: \"grid\",\n        gridGap: \"3px\",\n        height: \"100%\"\n    },\n    cell: {\n        boxSizing: \"border-box\",\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontFamily: 'Helvetica',\n        fontSize: '1em',\n        fontWeight: 'bold',\n    },\n    hitColors: {\n        hit: '#75daad',\n        empty: '#ffc299'\n    }\n}\n\nconst Cell = ({ iX, iY, cell }) => {\n    const clickType = useSelector(selectUserClickType);\n    const dispatch = useDispatch();\n    function handleClick(e) {\n        e.preventDefault();\n        let innerClickType = clickType;\n        if (e.type === 'contextmenu') {\n            innerClickType = CLICKTYPES.Cross\n        }\n        const type = cell.hitType === innerClickType\n            ? CLICKTYPES.Clear\n            : innerClickType;\n\n        dispatch(setUserHit({ type, iX, iY }));\n    }\n\n    return <div onContextMenu={handleClick} onClick={handleClick} style={{ ...styles.cell, backgroundColor: cell.color }} >{cell.value}</div>;\n}\n\nconst BoardGrid = () => {\n    const userSolution = useSelector(selectGame);\n    const numberOfRows = useSelector(selectNumberOfRows);\n    const numberOfColumns = useSelector(selectNumberOfColumns);\n    return (\n        <div style={{ ...styles.boardGrid, gridTemplateColumns: `repeat(${numberOfColumns}, 1fr)`, gridTemplateRows: `repeat(${numberOfRows}, 1fr)` }}>\n            {userSolution.map((subArray, iX) => subArray.map((cell, iY) => <Cell cell={cell} iX={iX} iY={iY} key={`${iX}${iY}`} />))}\n        </div>\n    )\n}\n\nconst Board = () =>\n    <div style={styles.board}>\n        <BoardGrid />\n    </div>\n\n\nexport default Board;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { HEADER_COLORS } from '../utils/Constants';\nimport { selectRowsValues, selectRowsAnswer } from '../features/rowsSlice';\nimport { selectColumnValues, selectColumnsAnswer } from '../features/columnsSlice';\nimport { selectRowsValidation, selectColumnValidation } from '../features/validationSlice';\nconst styles = {\n    headers: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr\",\n        gridGap: \"3px\",\n        height: \"100%\",\n        boxSizing: \"border-box\",\n    },\n    header: {\n        display: \"grid\",\n        gridGap: \"3px\",\n        height: \"100%\",\n        boxSizing: \"border-box\",\n    },\n    panel: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    rowHeaders: {\n        gridColumn: \"1\",\n        gridRow: \"2 / 8\",\n    },\n    columnHeaders: {\n        gridColumn: \"2 / 8\",\n        gridRow: \"1\",\n    }\n}\n\nconst Panel = ({ backgroundColor, value, }) => <div style={{ ...styles.panel, backgroundColor: backgroundColor }}>{value}</div>;\n\nconst Header = ({ headerValues, valid, alignment }) => {\n    const backgroundColor = valid\n        ? HEADER_COLORS.valid\n        : valid === undefined\n            ? HEADER_COLORS.valid\n            : HEADER_COLORS.invalid;\n\n    if (headerValues.length === 0) {\n        return (\n            <div style={{ ...styles.header, ...alignment }}>\n                <Panel backgroundColor={backgroundColor} />\n            </div>\n        )\n    }\n    return (\n        <div style={{ ...styles.header, ...alignment }}>\n            {headerValues.map((value, index) => (\n                <Panel key={index} backgroundColor={backgroundColor} value={value} />\n            ))}\n        </div>\n    )\n}\n\nconst Headers = ({ alignment, headersValues, gridTemplate, validations }) => (\n    <div style={{ ...styles.headers, ...gridTemplate }}>\n        {headersValues.map((headerValues, index) => (\n            <Header\n                alignment={alignment}\n                key={index}\n                headerValues={headerValues}\n                valid={validations[index]}\n            />\n        ))}\n    </div>\n)\n\nconst RowHeaders = () => {\n    const rowHeaderValues = useSelector(selectRowsValues);\n    const rowsValidation = useSelector(selectRowsValidation);\n    const gridTemplate = { gridTemplateRows: `repeat(${rowHeaderValues.length}, 1fr)` };\n    const vertical = { gridAutoFlow: \"column\" };\n    return (\n        <div style={styles.rowHeaders}>\n            <Headers\n                alignment={vertical}\n                headersValues={rowHeaderValues}\n                gridTemplate={gridTemplate}\n                validations={rowsValidation} />\n        </div>\n    )\n}\n\nconst ColumnHeaders = () => {\n    const columnHeaderValues = useSelector(selectColumnValues);\n    const columnsValidation = useSelector(selectColumnValidation);\n    const gridTemplate = { gridTemplateColumns: `repeat(${columnHeaderValues.length}, 1fr)` };\n    return (\n        <div style={styles.columnHeaders}>\n            <Headers\n                headersValues={columnHeaderValues}\n                gridTemplate={gridTemplate}\n                validations={columnsValidation} />\n        </div>\n    )\n}\n\nexport default function HeadersInformation() {\n    const userAnswerRows = useSelector(selectRowsAnswer);\n    const userAnswerColumns = useSelector(selectColumnsAnswer);\n\n    return (\n        <>\n            <ColumnHeaders userAnswer={userAnswerColumns} />\n            <RowHeaders userAnswer={userAnswerRows} />\n        </>\n    )\n} ","import React from 'react';\nimport Modal from 'react-modal';\nimport { useDispatch } from 'react-redux';\nimport { newPuzzle } from '../features/gameSlice';\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n    }\n};\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nModal.setAppElement('#root')\n\nconst NewGame = ({ completed }) => {\n    const dispatch = useDispatch();\n    const onClick = (e) => {\n        e.preventDefault();\n        dispatch(newPuzzle(e.currentTarget.id));\n    }\n\n    return (\n        <div>\n            <Modal\n                isOpen={completed}\n                style={customStyles}\n                contentLabel=\"New Game label?\"\n            >\n                <button id=\"easy\" onClick={onClick}>Easy</button>\n                <button id=\"medium\" onClick={onClick}>Medium</button>\n                <button id=\"hard\" onClick={onClick}>Hard</button>\n            </Modal>\n        </div>\n    );\n}\n\nexport default NewGame;","import React from 'react';\nimport NewGame from './NewGame';\n\nconst style = {\n    validationStyle: {\n        gridColumn: \"1\",\n        gridRow: \"1\",\n        boxSizing: \"border-box\",\n        backgroundColor: '#ffd31d'\n    },\n    buttonWrapper: {\n        boxSizing: \"border-box\",\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    }\n}\n\nexport default function Completed() {\n    return (\n        <div style={style.validationStyle} >\n            <div style={style.buttonWrapper}  >\n                <NewGame completed={true} />\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CLICKTYPES } from '../utils/Constants';\nimport { setClickType } from '../features/userSlice';\n\nconst style = {\n    wrapper: {\n        gridColumn: \"1\",\n        gridRow: \"1\",\n        boxSizing: \"border-box\",\n    },\n    menu: {\n        display: \"grid\",\n        gridGap: \"3px\",\n        height: \"100%\",\n        gridTemplateRows: `repeat(auto, auto)`,\n    },\n    item: {\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        boxSizing: \"border-box\",\n        fontWeight: 'bold',\n        backgroundColor: \"#75daad\",\n        lineHeight: '10px'\n    }\n}\n\nexport default function Menu() {\n    const dispatch = useDispatch();\n    const [selected, setSelected] = useState(CLICKTYPES.Hit)\n    function onClick(e) {\n        dispatch(setClickType(e.currentTarget.id));\n        setSelected(e.currentTarget.id);\n    }\n    return (\n        <div style={style.wrapper}>\n            <div style={style.menu}>\n                <div id={CLICKTYPES.Hit} onClick={onClick} style={{ ...style.item, backgroundColor: selected === CLICKTYPES.Hit ? \"#1eb2a6\" : \"#75daad\" }}></div>\n                <div id={CLICKTYPES.Cross} onClick={onClick} style={{ ...style.item, backgroundColor: selected === CLICKTYPES.Cross ? \"#1eb2a6\" : \"#75daad\" }}>X</div>\n                <div id={CLICKTYPES.Unknown} onClick={onClick} style={{ ...style.item, backgroundColor: selected === CLICKTYPES.Unknown ? \"#1eb2a6\" : \"#75daad\" }}>?</div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Completed from './Completed';\nimport Menu from './Menu';\nimport { selectCompleted } from '../features/validationSlice';\n\nexport default function Navigator({ setClickType }) {\n    const completed = useSelector(selectCompleted);\n\n    const child = completed\n        ? <Completed />\n        : <Menu setClickType={setClickType} />\n    return (\n        <>\n            {child}\n        </>\n    )\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Board from './Board';\nimport HeadersInformation from './HeadersInformation';\nimport Navigator from './Navigator';\nimport { initiateGame } from '../features/gameSlice';\n\nconst wrapperStyle = {\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(7, 1fr)\",\n  gridTtemplateRows: \"repeat(7, 1fr)\",\n  gridGap: \"3px\",\n  width: \"100vw\",\n  height: \"calc(100vh)\",\n}\n\nconst Game = () => {\n  return (\n    <div style={wrapperStyle}>\n      <Navigator />\n      <HeadersInformation />\n      <Board />\n    </div>\n  )\n}\n\nconst App = () => {\n  const dispatch = useDispatch();\n  dispatch(initiateGame());\n  return <Game />\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/store';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}